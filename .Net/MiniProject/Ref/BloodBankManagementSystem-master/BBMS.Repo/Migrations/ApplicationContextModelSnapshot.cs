// <auto-generated />
using System;
using BBMS.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BBMS.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BBMS.Data.Blood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("AddedDate");

                    b.Property<int>("BloodGroupID")
                        .HasColumnName("BloodGroupID");

                    b.Property<DateTime>("DateOfCollection")
                        .HasColumnName("DateOfCollection");

                    b.Property<int>("DonorID")
                        .HasColumnName("DonorID");

                    b.Property<int>("EventID")
                        .HasColumnName("EventID");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("IPAddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Blood");
                });

            modelBuilder.Entity("BBMS.Data.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("AddedDate");

                    b.Property<string>("BloodGroupName")
                        .IsRequired();

                    b.Property<string>("IPAddress")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("BBMS.Data.Donor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("AddedDate");

                    b.Property<string>("Address");

                    b.Property<int>("BloodGroupID");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateofBirth");

                    b.Property<string>("Diseases");

                    b.Property<string>("Email");

                    b.Property<string>("Gender");

                    b.Property<string>("IPAddress")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Donor");
                });

            modelBuilder.Entity("BBMS.Data.Events", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("AddedDate");

                    b.Property<DateTime>("DateofDonation");

                    b.Property<string>("IPAddress")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn")
                        .IsRequired();

                    b.Property<int?>("TotalBloodCollected");

                    b.Property<string>("Venue");

                    b.Property<string>("Volunteers");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BBMS.Data.BloodGroup", b =>
                {
                    b.HasOne("BBMS.Data.Blood", "Blood")
                        .WithOne("BloodGroup")
                        .HasForeignKey("BBMS.Data.BloodGroup", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBMS.Data.Donor", "Donor")
                        .WithOne("BloodGroup")
                        .HasForeignKey("BBMS.Data.BloodGroup", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BBMS.Data.Donor", b =>
                {
                    b.HasOne("BBMS.Data.Blood", "Blood")
                        .WithOne("Donor")
                        .HasForeignKey("BBMS.Data.Donor", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BBMS.Data.Events", b =>
                {
                    b.HasOne("BBMS.Data.Blood", "Blood")
                        .WithOne("Events")
                        .HasForeignKey("BBMS.Data.Events", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
